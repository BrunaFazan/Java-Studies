aula Github Rasmoo -->

Instalação do github:
    Entrar no site do git-scm, e baixamos o git com os bits do pc. 

criando um repositório e o clonando para o pc:
    primeiro criamos um repo dentro do Github. Após cirado, vamo no botão code selecionamos a opção https e copiamos o link disponibilizado.
    selecionamos a pasta onde queremos clonar o repositório abrimos o terminal dentro dela, escrevemos git clone e colamos o link do repositório.

primeiros comandos do git:
    para verificar se seu repositório no git está atualizado junto com o arquivo no seu pc onde vc está trabalhando, 
    usamos git status no git bash (sempre dentro da pasta do repositório).
    Nós temos que adicionar os arquivos que não foram commitados para essa fila, para que possa subir e ir para o repositório.
    O comando git add . adiciona todos os arquivos não commitados para essa fila, para subir para o repositório. se vc quiser adicionar algum especifico 
    vc coloca git add e o nome do arquivo. 
    nisso, nós colocams o arquivo na fila para ser commitado, ele ainda não esta no repositório, esta pronto pra entrar. 
    agora colocamos a descrição do commit, com o comando (git commit -m "aqui dentro vai a mensagem do commit")
    mas para que o  git aceite seu commit vc precisa se idenificar, mandando seu email e nome de usuario:
    git config --global user.email "bruna.fazan@yahoo.com.br"
    e depois fazer a mesma coisa só que com o nome:
    git config --global user.nome "Bruna Fazan"

agora que foi tudo commitado, precisamos enviar despachar isso para o Github:
    esse comando pega todos os commits que a gente fez e manda pro git:
    git push. 

e agora temos que atualizar esses arquivos que estão no github:
    é só commitar e dar push novamente. 

navegando entre as versões dos commits:
    pela própria interface do github é possível ver quem fez e quais foram as alterações.
    tem um comando do git que mostra os comits que a gente ja fez:
    git reflog.
    voltando para versoes antigas: git reset --hard + o id do commit. só que volta tudo, pra versão antiga, ou pra versão mais nova.

Entendendo o que são as branches:
    temos a branch principal, a ramificação principal, a main, é onde as coisas estão ok e sempre funcionando. 
    podemos ter a branch de desenvolvimento, onde estamos testando coisas e etc, onde teremos mais versões que na main.
    e só quando tiver tudo certo na branch nós enviamos os arquivos pra branch main.
    o comando git branch mostra quais as branchs e onde estamos trabalhando.
    o comando git branch nome da branch cria a branch nova.
    e o comando git checkout nome da branch muda pra ela.
    
    como criamos a branch em determinado momento, tudo que foi feito após a criação dela não foi salvo, para que essas novas informações sejam 
    salvas, temos que envia-las a branch certa.

    
